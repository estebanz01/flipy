*Flipy - a simple Flickr API wrapper for Python*

Flipy is a new, simple Python library for accessing the Flickr API. The goal is to expose Flickr's API methods as-is, but for the responses to be as pythonic as possible.

A basic use of the library is something like this:

<pre>
from flipy import Flipy
flickr = Flipy(MY_API_KEY)
me = flickr.people.findByUsername(username='ianloic')
me_info = flickr.people.getInfo(user_id=me.nsid)
print 'My name is %s. I have %s photos at %s.' % (me_info.realname, me_info.photos.count, me_info.photosurl)
</pre>

As you can see the method calls you make from Python exactly match Flickr's API documentation, but the objects returned obey Python conventions.

Response objects are mapped in a fairly simple, predictable manner. The outer &lt;rsp&gt; isn't present in Flipy's result objects. If there's an error you'll get an exception, currently not a very useful one, but that'll get better in the future. If there's no error you'll get either the root of the result (for most methods) or a list of the roots (if there more than one, such as for @flickr.reflection.getMethodInfo@).

For each XML node in the result there's a Python object. If the node has no attributes or child nodes then it will just be a string of its text value. All node attributes are represented as properties. If a node name is a plural (eg: &lt;photos&gt;) and similar but non-plural children (eg: &lt;photo&gt;) will be represented as items - ie: you can iterate over the node. Other child nodes are represented as properties or a list of properties if there are multiple children with the same name.

Some response objects have special methods. For example photo objects have a @info()@ method that calls @flickr.photo.getInfo@.

Requests will be signed if you supply an API secret, either as the second argument to the @Flipy()@ constructor or by setting the @secret@ field on your Flipy object. For example:
<pre>
# this works
flickr = Flipy(MY_API_KEY)
flickr.secret = MY_API_SECRET
# so does this
flickr = Flipy(MY_API_KEY, MY_API_SECRET)
</pre>

To authenticate, just use the normal Flickr API authentication calls. Flipy supports web, desktop and mobile because it simply wraps the existing API. If a Flipy object knows about the an auth token then it will be passed with all requests. The token can be assigned to the @token@ field on the Flipy object or passed into the constructor. There's also a helper method on the Flipy object, @authurl@ to return a signed authentication url. A desktop auth flow might look like:
<pre>
flickr = Flipy(MY_API_KEY, MY_API_SECRET)
frob = flickr.auth.getFrob()
print 'Go to: %s' % flickr.authurl(perms='read', frob=frob)
raw_input('Press enter when you've completed your Flickr auth flow...')
token_response = flickr.auth.getToken(frob=frob)
flickr.token = token_response.token
# now you can make authenticated requests
</pre>

*Limitations*
* Errors aren't exposed in a useful fashion yet
* Uploading isn't supported yet

*Other Plans*
* Asynchronous mode (supporting twisted, gtk+, threading, etc)
* Pluggable HTTP support (supporting twisted, GAE, etc)
* Comprehensive unit tests
* Unicode support is unverified

These limitations and plans will be addressed soon.

*License*
Flipy is distributed under the GNU LGPL (see lgpl.txt). That means you can use it in your project without paying me or telling me, but if you make changes to it you need to share them with your users. Let me know if that's going to be a problem for you for some reason. I'm sure we can work something out.
